// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum PRICE {
  CHEAP
  REGULAR
  EXPENSIVE
}

model User {
  id            String    @id @default(cuid())
  name          String    @default("Anonymous")
  city          String?
  email         String?   @unique
  emailVerified DateTime?
  image         String?
  password      String?
  phone         String?
  created_at    DateTime  @default(now())
  updated_at    DateTime  @updatedAt
  reviews       Review[]
  accounts      Account[]
  sessions      Session[]
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model Restaurant {
  id          String    @id @default(cuid())
  name        String
  main_image  String
  images      String[]
  description String
  open_time   String
  close_time  String
  slug        String    @unique
  price       PRICE
  items       Item[]
  bookings    Booking[]
  tables      Table[]
  reviews     Review[]
  location_id String
  location    Location  @relation(fields: [location_id], references: [id], onDelete: Cascade)
  cuisine_id  String
  cuisine     Cuisine   @relation(fields: [cuisine_id], references: [id], onDelete: Cascade)
  created_at  DateTime  @default(now())
  updated_at  DateTime  @updatedAt
}

model Item {
  id            String     @id @default(cuid())
  name          String
  price         String
  description   String
  restaurant_id String
  restaurant    Restaurant @relation(fields: [restaurant_id], references: [id], onDelete: Cascade)
  created_at    DateTime   @default(now())
  updated_at    DateTime   @updatedAt
}

model Location {
  id          String       @id @default(cuid())
  name        String
  restaurants Restaurant[]
  created_at  DateTime     @default(now())
  updated_at  DateTime     @updatedAt
}

model Cuisine {
  id          String       @id @default(cuid())
  name        String
  restaurants Restaurant[]
  created_at  DateTime     @default(now())
  updated_at  DateTime     @updatedAt
}

model Review {
  id            String     @id @default(cuid())
  name          String     @default("Anonymous")
  text          String
  rating        Float
  restaurant_id String
  restaurant    Restaurant @relation(fields: [restaurant_id], references: [id], onDelete: Cascade)
  user_id       String
  user          User       @relation(fields: [user_id], references: [id], onDelete: Cascade)
  created_at    DateTime   @default(now())
  updated_at    DateTime   @updatedAt
}

model Booking {
  id               String             @id @default(cuid())
  number_of_people Int
  booking_time     DateTime
  booker_email     String
  booker_phone     String
  booker_name      String
  booker_occasion  String?
  booker_request   String?
  restaurant_id    String
  restaurant       Restaurant         @relation(fields: [restaurant_id], references: [id], onDelete: Cascade)
  tables           BookingsOnTables[]
  created_at       DateTime           @default(now())
  updated_at       DateTime           @updatedAt
}

model Table {
  id            String             @id @default(cuid())
  seats         Int
  restaurant_id String
  restaurant    Restaurant         @relation(fields: [restaurant_id], references: [id], onDelete: Cascade)
  bookings      BookingsOnTables[]
  created_at    DateTime           @default(now())
  updated_at    DateTime           @updatedAt
}

model BookingsOnTables {
  booking_id String
  booking    Booking  @relation(fields: [booking_id], references: [id], onDelete: Cascade)
  table_id   String
  table      Table    @relation(fields: [table_id], references: [id], onDelete: Cascade)
  created_at DateTime @default(now())
  updated_at DateTime @updatedAt

  @@id([booking_id, table_id])
}
